openapi: 3.0.3
info:
  title: EyeCAN Visualizer API
  description: |-
    This API is for using the EyeCAN Visualizer

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://127.0.0.1:5255/api/v1
tags:
  - name: Knowledge Base
    description: Article handling
  - name: Filter collection
    description: Filter handling
  - name: Data collection
    description: Dataset handling
paths:
  /knowledgebase:
    get:
      tags:
        - Knowledge Base
      summary: Get one page of Articles
      description: Get one page of Articles
      operationId: getArticles
      parameters:
        - name: page
          in: query
          description: Page to be loaded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleList'
        '204':
          description: No page found
        '400':
          description: Invalid page number
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    post:
      tags:
        - Knowledge Base
      summary: Add an Article
      description: Add a new Article
      operationId: createArticle
      requestBody:
        description: Create a new article
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: max. 128 chars
                  example: Test Title
                date:
                  type: integer
                  format: int64
                  description: unix timestamp in seconds
                  example: 1739450365
                author:
                  type: string
                  description: max. 128 chars
                  example: Max Mustermann
                content:
                  type: string
                  description: max. 10000 char
                  example: Information about an error
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    delete:
      tags:
        - Knowledge Base
      summary: Delete an Article
      description: Delete an Article
      operationId: deleteArticle
      parameters:
        - name: uuid
          in: query
          description: Article id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful deleted
        '400':
          description: Invalid ID supplied
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
    put:
      tags:
        - Knowledge Base
      summary: Update Article
      description: Update an Article
      operationId: updateArticle
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Successful updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
  /filters:
    get:
      tags:
        - Filter collection
      summary: Get one page of filters
      description: Get one page of filters
      operationId: getFilters
      parameters:
        - name: page
          in: query
          description: Page to be loaded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterList'
        '204':
          description: No page found
        '400':
          description: Invalid page number
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    post:
      tags:
        - Filter collection
      summary: Add a Filter
      description: Add a new Filter
      operationId: createFilter
      requestBody:
        description: Create a new filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter' 
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    delete:
      tags:
        - Filter collection
      summary: Delete an Article
      description: Delete an Article
      operationId: deleteFilter
      parameters:
        - name: uuid
          in: query
          description: Filter id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful deleted
        '400':
          description: Invalid ID supplied
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
    put:
      tags:
        - Filter collection
      summary: Update Article
      description: Update an Article
      operationId: updateFilter
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: Successful updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
  /data:
    get:
      tags:
        - Data collection
      summary: Get one page of datasets
      description: Get one page of datasets
      operationId: getDatasets
      parameters:
        - name: page
          in: query
          description: Page to be loaded
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetList'
        '204':
          description: No page found
        '400':
          description: Invalid page number
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    post:
      tags:
        - Data collection
      summary: Create fusion dataset
      description: Create fusion dataset based on mdf4 and dbc
      operationId: createDataset
      requestBody:
        description: Create a new dataset
        content:
          application/json:
            schema:
              type: to be defined
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Invalid input
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
        '507':
          description: There is no storage capacity left
    delete:
      tags:
        - Data collection
      summary: Delete a Dataset
      description: Delete a Dataset
      operationId: deleteDataset
      parameters:
        - name: uuid
          in: query
          description: Dataset id too delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful deleted
        '400':
          description: Invalid ID supplied
        '415':
          description: Wrong Content-Type
        '500':
          description: An error occurred on the server side
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 436e2874-ed68-4c31-8267-527c3f5470a3
        title:
          type: string
          description: max. 128 chars
          example: Test Title
        date:
          type: integer
          format: int64
          description: unix timestamp in seconds
          example: 1739450365
        author:
          type: string
          description: max. 128 chars
          example: Max Mustermann
        content:
          type: string
          description: max. 10000 char
          example: Information about an error
      xml:
        name: article
    ArticleList:
      type: object
      properties:
        page:
          type: integer
          format: int64
        lastpage:
          type: boolean
        articles:
          type: array
          description: 10x Article
          items:
            $ref: '#/components/schemas/Article'
      xml:
        name: articlelist
    Filter:
      type: object
      properties:
        
      xml:
        name: filter
    FilterList:
      type: object
      properties:
        page:
          type: integer
          format: int64
        lastpage:
          type: boolean
        filters:
          type: array
          description: 10x Filters
          items:
            $ref: '#/components/schemas/Filter'
      xml:
        name: filterlist
    Dataset:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 436e2874-ed68-4c31-8267-527c3f5470a3
        title:
          type: string
          description: max. 128 chars
        description:
          type: string
          description: max. 10000 chars
        selectedSignalValues:
          type: array
          description: Array of strings containing the names of signals
          items:
            type: string
    DatasetList:
      type: object
      properties:
        page:
          type: integer
          format: int64
        lastpage:
          type: boolean
        datasets:
          type: array
          description: 10x datasets
          items:
            $ref: '#/components/schemas/Dataset'
